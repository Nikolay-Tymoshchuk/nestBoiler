{
  "compilerOptions": {
    /** Определяет модульную систему, которую TypeScript использует для компиляции кода. "commonjs" — это модульная система, используемая в Node.js.*/
    "module": "commonjs",
    /** Указывает компилятору генерировать .d.ts файлы с декларациями типов для скомпилированных модулей. Эти файлы полезны для публикации библиотек на TypeScript. */
    "declaration": true,
    /** Удаляет все комментарии из скомпилированных файлов JavaScript. */
    "removeComments": true,
    /** Включает генерацию метаданных для классов и методов, которые используют декораторы. Это требуется для работы с декораторами в TypeScript, например, в Angular.*/
    "emitDecoratorMetadata": true,
    /** Включает поддержку экспериментального синтаксиса декораторов в TypeScript. Декораторы — это специальный тип аннотаций, которые можно использовать для классов, методов, свойств и параметров. */
    "experimentalDecorators": true,
    /** Разрешает импортировать модули, которые не имеют экспорта по умолчанию, как будто они его имеют. Полезно для совместимости с модулями, которые не поддерживают esModuleInterop. */
    "allowSyntheticDefaultImports": true,
    /** Указывает версию ECMAScript, в которую будет транслироваться код. ES2021 — это версия ECMAScript, которая поддерживает новейшие функции, такие как логические операторы присваивания, глобальный объект globalThis, и т.д. */
    "target": "ES2021",
    /** Генерирует файлы .map, которые связывают скомпилированный JavaScript с исходным TypeScript-кодом. Это полезно для отладки.*/
    "sourceMap": true,
    /** Указывает директорию, в которую будут помещены скомпилированные файлы JavaScript и другие артефакты компиляции.*/
    "outDir": "./dist",
    /** Устанавливает базовый путь для разрешения неявных относительных путей. Это влияет на работу paths и относительных импортов.*/
    "baseUrl": "./",
    /** Включает инкрементальную компиляцию, что позволяет TypeScript пересобирать только те файлы, которые изменились, ускоряя повторную компиляцию.*/
    "incremental": true,
    /** Пропускает проверку типов в файлах библиотек (например, node_modules/@types). Это может ускорить компиляцию, но может привести к упущению ошибок типов в библиотечных файлах.*/
    "skipLibCheck": true,
    /** Включает строгую проверку типов null и undefined. Если опция включена, переменные, которые не могут быть null или undefined, будут вызывать ошибку компиляции, если такие значения будут присвоены.*/
    "strictNullChecks": true,
    /** Отключает правило, требующее явного указания типов. Если true, TypeScript будет выдавать ошибку, когда не удается вывести тип и он становится any.*/
    "noImplicitAny": false,
    /** Отключает строгую проверку типов для методов bind, call и apply. Если включить, TypeScript будет проверять, что параметры, переданные этим методам, соответствуют типам исходного метода.*/
    "strictBindCallApply": false,
    /** Отключает требование к файлам, чтобы их имена были в одном стиле. Если включено, компилятор будет проверять, чтобы файлы всегда импортировались с одинаковым регистром символов в имени.*/
    "forceConsistentCasingInFileNames": false,
    /** Отключает проверку на случайное “прохождение” через case в switch выражении. Если включено, TypeScript будет выдавать ошибку, если случайно не использовать break или return в конце case.*/
    "noFallthroughCasesInSwitch": false,
    /** Включает совместимость с модулями ES. Это позволяет использовать стандартный импорт и экспорт с модулями, которые не соответствуют стандартам ES, улучшая совместимость с модулями CommonJS.*/
    "esModuleInterop": true
  },
  "include": [
    ".install-scripts/**/*.ts",
    "renovate.js",
    ".hygen.js",
    "eslint.config.mjs",
    "commitlint.config.js"
  ]
}
